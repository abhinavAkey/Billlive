package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.UserData;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;


@Component("userRepository")
public class UserRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(UserRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
	
	private UserData userData = null;
	
	List<UserData> usersList = new ArrayList<UserData>();
	
	public String addUser(UserData userData) {
		try {
			DatabaseReference usersRef = databaseReference.child("users");
			Map<String, UserData> user = new HashMap<String, UserData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference usersPostRef = usersRef.push();
			// Get the unique ID generated by a push()
			String postId = usersPostRef.getKey();
			userData.setPostId(postId);
			user.put(userData.getUid(), userData);
			usersPostRef.setValue(userData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + userData.getUid());
			            isAdded = "N";
			        } else {
			        	logger.info("User saved successfully, User Details="+userData.getUid());
			        	isAdded = "Y";
					}
			    }
			});
			return isAdded;
		} catch (Exception e) {
			return isAdded;	
		}
	}

	public String updateUser(UserData userData) {
		try {
			DatabaseReference usersRef = databaseReference.child("users");
			Map<String, Object> userUpdates = new HashMap<String, Object>();
			userUpdates.put(userData.getUid(), userData);
			usersRef.updateChildren(userUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + userData.getUid());
			            isUpdated = "N";
			        } else {
			        	logger.info("User updated successfully, User Details="+userData.getUid());
			        	isUpdated = "Y";
					}
			    }
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;	
		}
	}
	
	public String removeUser(String uid) {
		try {
			DatabaseReference usersRef = databaseReference.child("users");
			Map<String, Object> userUpdates = new HashMap<String, Object>();
			userUpdates.put(uid, null);
			usersRef.updateChildren(userUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + uid);
			            isDeleted = "N";
			        } else {
			        	logger.info("User removed successfully, User Details="+uid);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public UserData getUserById(String uId) {
		DatabaseReference userDataRef = databaseReference.child("users");
		userData = null;
		userDataRef.orderByChild("uid").equalTo(uId).addChildEventListener(new ChildEventListener() {
		    @Override
		    public void onChildAdded(DataSnapshot dataSnapshot, String prevChildKey) {
		        userData = dataSnapshot.getValue(UserData.class);
		        System.out.println(dataSnapshot.getKey() + " was " + userData.getUid());
		    }

			@Override
			public void onChildChanged(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onChildRemoved(DataSnapshot snapshot) {
				
			}

			@Override
			public void onChildMoved(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		logger.info("User loaded successfully, User details=" + userData);
		return userData;
	}
	
	public List<UserData> getAllUsers() {
		DatabaseReference userDataRef = databaseReference.child("users");
		userDataRef.addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot userSnapshot) {
		    	usersList.clear();
		        for (DataSnapshot userPostSnapshot: userSnapshot.getChildren()) {
		            UserData userData = userPostSnapshot.getValue(UserData.class);
		            usersList.add(userData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return usersList;
	}


}