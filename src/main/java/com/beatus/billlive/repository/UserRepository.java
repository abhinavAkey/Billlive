package com.beatus.billlive.repository;

import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;


@Component("userRepository")
public class UserRepository {

	private static final Logger logger = LoggerFactory.getLogger(TaxRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;

	public void isRegistered(String uid, OnGetDataListener listener) {
		logger.info("inside isRegistered method");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference companyUsersRef = databaseReference.child("companyusers");
		companyUsersRef.orderByChild("uid").equalTo(uid).addListenerForSingleValueEvent(new ValueEventListener() {
			@Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}
	
	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource, OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
		    Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if(waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}
		
	}
	
	/*private static final Logger logger = LoggerFactory.getLogger(UserRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
	
	private UserData userData = null;
	
	List<UserData> usersList = new ArrayList<UserData>();
	
	public String addUser(UserData userData) {
		try {
			CompanyUsers companyUsers = new CompanyUsers();
			String companyId = Utils.generateRandomKey(10);
			companyUsers.setUid(userData.getUid());
			companyUsers.setCompanyId(companyId);
			userData.setCompanyId(companyId);
			DatabaseReference usersRef = databaseReference.child("users").child(userData.getCompanyId());
			DatabaseReference companyUsersRef = databaseReference.child("companyUsers");
			Map<String, UserData> user = new HashMap<String, UserData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference usersPostRef = usersRef.push();
			// Get the unique ID generated by a push()
			String postId = usersPostRef.getKey();
			userData.setPostId(postId);
			
			user.put(userData.getUid(), userData);
			usersPostRef.setValue(userData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + userData.getUid());
			            isAdded = "N";
			        } else {
			        	logger.info("User saved successfully, User Details="+userData.getUid());
			        	isAdded = "Y";
					}
			    }
			});
			return isAdded;
		} catch (Exception e) {
			return isAdded;	
		}
	}

	public String updateUser(UserData userData) {
		try {
			DatabaseReference usersRef = databaseReference.child("users").child(userData.getCompanyId());
			Map<String, Object> userUpdates = new HashMap<String, Object>();
			userUpdates.put(userData.getUid(), userData);
			usersRef.updateChildren(userUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + userData.getUid());
			            isUpdated = "N";
			        } else {
			        	logger.info("User updated successfully, User Details="+userData.getUid());
			        	isUpdated = "Y";
					}
			    }
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;	
		}
	}
	
	public String removeUser(String companyId, String userId) {
		try {
			DatabaseReference usersRef = databaseReference.child("users").child(companyId);
			Map<String, Object> userUpdates = new HashMap<String, Object>();
			userUpdates.put(userId, null);
			usersRef.updateChildren(userUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + userId);
			            isDeleted = "N";
			        } else {
			        	logger.info("User removed successfully, User Details="+userId);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public UserData getUserById(String companyId, String userId) {
		DatabaseReference userDataRef = databaseReference.child("users").child(companyId);
		userData = null;
		userDataRef.orderByChild("userId").equalTo(userId).addChildEventListener(new ChildEventListener() {
		    @Override
		    public void onChildAdded(DataSnapshot dataSnapshot, String prevChildKey) {
		        userData = dataSnapshot.getValue(UserData.class);
		        System.out.println(dataSnapshot.getKey() + " was " + userData.getUid());
		    }

			@Override
			public void onChildChanged(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onChildRemoved(DataSnapshot snapshot) {
				
			}

			@Override
			public void onChildMoved(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		logger.info("User loaded successfully, User details=" + userData);
		return userData;
	}
	
	public List<UserData> getAllUsers(String companyId) {
		DatabaseReference userDataRef = databaseReference.child("users").child(userData.getCompanyId());
		userDataRef.orderByChild("companyId").equalTo(companyId).addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot userSnapshot) {
		    	usersList.clear();
		        for (DataSnapshot userPostSnapshot: userSnapshot.getChildren()) {
		            UserData userData = userPostSnapshot.getValue(UserData.class);
		            usersList.add(userData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return usersList;
	}*/
	
}