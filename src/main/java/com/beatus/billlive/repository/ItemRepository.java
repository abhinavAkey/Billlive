package com.beatus.billlive.repository;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.beatus.billlive.domain.model.ItemData;
import com.beatus.billlive.domain.model.ItemDataTest;
import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;

@Component("itemRepository")
public class ItemRepository {

	private static final Logger logger = LoggerFactory.getLogger(ItemRepository.class);

	@Autowired
	@Qualifier(value = "databaseReference")
	private DatabaseReference databaseReference;

	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";

	private ItemData itemData = null;

	List<ItemData> itemsList = new ArrayList<ItemData>();
	static AmazonDynamoDBClient dynamoDB;
	static DynamoDBMapper mapper;

    /**
     * The only information needed to create a client are security credentials
     * consisting of the AWS Access Key ID and Secret Access Key. All other
     * configuration, such as the service endpoints, are performed
     * automatically. Client parameters, such as proxies, can be specified in an
     * optional ClientConfiguration object when constructing a client.
     *
     * @see com.amazonaws.auth.BasicAWSCredentials
     * @see com.amazonaws.auth.ProfilesConfigFile
     * @see com.amazonaws.ClientConfiguration
     */
    private static void init() throws Exception {
        /*
         * The ProfileCredentialsProvider will return your [default]
         * credential profile by reading from the credentials file located at
         * (C:\\Users\\anudeep.akey\\.aws\\credentials).
         */
        AWSCredentials credentials = null;
        try {
            credentials = new ProfileCredentialsProvider("default").getCredentials();
        } catch (Exception e) {
            throw new AmazonClientException(
                    "Cannot load the credentials from the credential profiles file. " +
                    "Please make sure that your credentials file is at the correct " +
                    "location (C:\\Users\\anudeep.akey\\.aws\\credentials), and is in valid format.",
                    e);
        }
        dynamoDB = new AmazonDynamoDBClient(credentials);
        Region usEast1 = Region.getRegion(Regions.US_EAST_1);
        dynamoDB.setRegion(usEast1);
        mapper = new DynamoDBMapper(dynamoDB);
        
			     
    }

    public String addItem(ItemData itemData) {
        try {
            DatabaseReference itemsRef = databaseReference.child("items").child(itemData.getCompanyId());
            Map<String, ItemData> item = new HashMap<String, ItemData>();
            // Generate a reference to a new location and add some data using
            // push()
            DatabaseReference itemsPostRef = itemsRef.push();
            // Get the unique ID generated by a push()
            String postId = itemsPostRef.getKey();
            itemData.setPostId(postId);
            item.put(itemData.getItemId(), itemData);
            itemsPostRef.setValue(itemData, new DatabaseReference.CompletionListener() {
                @Override
                public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
                    if (databaseError != null) {
                        logger.info(
                                "Data could not be saved " + databaseError.getMessage() + " " + itemData.getItemId());
                        isAdded = "N";
                    } else {
                        logger.info("Item saved successfully, Item Details=" + itemData.getItemId());
                        isAdded = "Y";
                    }
                }
            });
          
        } catch (Exception e) {
            return isAdded;
           
        }
        return isAdded;
    }

	public ItemDataTest addItemTest(ItemDataTest itemData) throws Exception {
		try {
//			DatabaseReference itemsRef = databaseReference.child("items").child(itemData.getCompanyId());
//			Map<String, ItemData> item = new HashMap<String, ItemData>();
//			// Generate a reference to a new location and add some data using
//			// push()
//			DatabaseReference itemsPostRef = itemsRef.push();
//			// Get the unique ID generated by a push()
//			String postId = itemsPostRef.getKey();
//			itemData.setPostId(postId);
//			item.put(itemData.getItemId(), itemData);
//			itemsPostRef.setValue(itemData, new DatabaseReference.CompletionListener() {
//				@Override
//				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
//					if (databaseError != null) {
//						logger.info(
//								"Data could not be saved " + databaseError.getMessage() + " " + itemData.getItemId());
//						isAdded = "N";
//					} else {
//						logger.info("Item saved successfully, Item Details=" + itemData.getItemId());
//						isAdded = "Y";
//					}
//				}
//			});
//			return isAdded;
			init();
			// save a new item
		    mapper.save(itemData);
//			String tableName = "ItemData";
//			Map<String, AttributeValue> item = newItem(itemData);
//            PutItemRequest putItemRequest = new PutItemRequest(tableName, item);
//            PutItemResult putItemResult = dynamoDB.putItem(putItemRequest);
//            System.out.println("Result: " + putItemResult);
            
		} catch (AmazonServiceException  e) {
			return null;
		}
		return itemData;
	}
	private static Map<String, AttributeValue> newItem(ItemData itemData) throws IllegalArgumentException, IllegalAccessException {
        Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
       // List<Field> privateFields = new ArrayList<>();
        Field[] allFields = ItemData.class.getDeclaredFields();
        for (Field field : allFields) {
        	item.put(field.toString(), new AttributeValue((String) field.get(itemData)));
            }
        return item;
    }
	public String updateItem(ItemData itemData) {
		try {
			DatabaseReference itemsRef = databaseReference.child("items").child(itemData.getCompanyId());
			Map<String, Object> itemUpdates = new HashMap<String, Object>();
			itemUpdates.put(itemData.getItemId(), itemData);
			itemsRef.updateChildren(itemUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println(
								"Data could not be updated " + databaseError.getMessage() + " " + itemData.getItemId());
						isUpdated = "N";
					} else {
						logger.info("Item updated successfully, Item Details=" + itemData.getItemId());
						isUpdated = "Y";
					}
				}
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;
		}
	}

	public String removeItem(String companyId, String itemId) {
		try {
			DatabaseReference itemsRef = databaseReference.child("items").child(companyId);
			Map<String, Object> itemUpdates = new HashMap<String, Object>();
			itemUpdates.put(itemId, null);
			itemsRef.updateChildren(itemUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println("Data could not be removed " + databaseError.getMessage() + " " + itemId);
						isDeleted = "N";
					} else {
						logger.info("Item removed successfully, Item Details=" + itemId);
						isDeleted = "Y";
					}
				}
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;
		}
	}

	public void getItemById(String companyId, String itemId, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference itemDataRef = databaseReference.child("items").child(companyId);
		itemData = null;
		itemDataRef.orderByChild("itemId").equalTo(itemId).addListenerForSingleValueEvent(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				waitSource.setResult(dataSnapshot);
			}

			@Override
			public void onCancelled(DatabaseError databaseError) {
				listener.onFailed(databaseError);
			}
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("Item loaded successfully, Item details=" + itemData);
	}

	public void getAllItems(String companyId, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference itemDataRef = databaseReference.child("items").child(companyId);
		itemDataRef.addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource,
			OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
			Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if (waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}

	}
}