package com.beatus.billlive.repository;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.ExcelData;
import com.beatus.billlive.domain.model.ExcelReport;
import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;


@Component("excelRepository")
public class ExcelRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(ExcelRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
			
	public String addExcelDataReport(ExcelReport excelReport) {
		try {
        	logger.info("In addExcelDataReport method of ExcelRepository");
			DatabaseReference excelDataRef = databaseReference.child("excelreport").child(excelReport.getCompanyId()).child(excelReport.getReportId());
			Map<String, ExcelReport> report = new HashMap<String, ExcelReport>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference excelDataPostRef = excelDataRef.push();
			// Get the unique ID generated by a push()
			String postId = excelDataPostRef.getKey();
			excelReport.setPostId(postId);
			report.put(excelReport.getReportId(), excelReport);
			excelDataPostRef.setValue(excelReport, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + excelReport.getuId());
			        } else {
			        	logger.info("ExcelDataReport saved successfully, ExcelDataReport="+excelReport.getuId());
			        }
			    }
			});
			return excelReport.getReportId();
		} catch (Exception e) {
			throw e;	
		}
	}
	public String addExcelData(ExcelData excelData) {
		try {
        	logger.info("In addExcelData method of ExcelRepository");
			DatabaseReference excelDataRef = databaseReference.child("excelTest").child(excelData.getCompanyId());
			Map<String, ExcelData> report = new HashMap<String, ExcelData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference excelDataPostRef = excelDataRef.push();
			// Get the unique ID generated by a push()
			String postId = excelDataPostRef.getKey();
			excelData.setPostId(postId);
			report.put(excelData.getCompanyId(), excelData);
			excelDataPostRef.setValue(excelData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + excelData.getCompanyId());
			        } else {
			        	logger.info("excelData saved successfully, excelData Details="+excelData.getCompanyId());
			        }
			    }
			});
			return excelData.getCompanyId();
		} catch (Exception e) {
			throw e;	
		}
	}
	public void getExcelData(String companyId, String excelReportId, OnGetDataListener listener) {
		logger.info("In getExcelData method of ExcelRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();
		
		DatabaseReference excelDataRef = databaseReference.child("excelreport").child(companyId).child(excelReportId);
		excelDataRef.orderByChild("excelReportId").equalTo(excelReportId).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("Excel data loaded successfully");
	}
	
	public void getExcelReport(String companyId,  String itemname, String state, String district,String year, OnGetDataListener listener) {
		logger.info("In getExcelReport method of ExcelRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();
		
		DatabaseReference excelDataRef = databaseReference.child("excelTest").child(companyId);
		excelDataRef.orderByChild("itemName").equalTo(itemname).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("Excel data loaded successfully");
	}
	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource, OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
		    Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if(waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}
		
	}

	
}