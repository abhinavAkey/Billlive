package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.CompanyData;
import com.beatus.billlive.domain.model.CompanyUsers;
import com.beatus.billlive.utils.Constants;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;


@Component("companyRepository")
public class CompanyRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(CompanyRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	@Resource(name = "userRepository")
	private UserRepository userRepository;
	
	private String isAdded = "N";
	private String isUpdated = "N";
	private String isDeleted = "N";
	
	private CompanyData companyData = null;
	
	List<CompanyData> companysList = new ArrayList<CompanyData>();
	
	public String addCompany(CompanyData companyData) {
		try {
			String companyId = companyData.getCompanyId();
			DatabaseReference companyUsersRef = databaseReference.child("companyUsers");
			DatabaseReference companysRef = databaseReference.child("companys").child(companyData.getCompanyId());
			Map<String, CompanyData> company = new HashMap<String, CompanyData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference companysPostRef = companysRef.push();
			// Get the unique ID generated by a push()
			String postId = companysPostRef.getKey();
			companyData.setPostId(postId);
			company.put(companyData.getCompanyId(), companyData);
			companysPostRef.setValue(companyData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + companyData.getCompanyId());
			            isAdded = "N";
			        } else {
			        	logger.info("Company saved successfully, Company Details="+companyData.getCompanyId());
			        	isAdded = "Y";
					}
			    }
			});
			if(Constants.YES.equalsIgnoreCase(isAdded)){
				addCompanyUser(companyUsersRef, companyData, companyId);
			}
			if(Constants.YES.equalsIgnoreCase(isAdded)){
				return companyId;
			}else {
				return null;
			}
		} catch (Exception e) {
			return null;	
		}
	}

	private void addCompanyUser(DatabaseReference companyUsersRef, CompanyData companyData, String companyId) {
		CompanyUsers companyUsers = new CompanyUsers();
		for (int i = 0; i < companyData.getListUid().size(); i++) {
			companyUsers.setUid(companyData.getListUid().get(i).getUid());
		}
		companyUsers.setCompanyId(companyId);
		Map<String, CompanyUsers> companyUsersMap = new HashMap<String, CompanyUsers>();
		DatabaseReference companyUsersPostRef = companyUsersRef.push();
		String companyUsersPostId = companyUsersPostRef.getKey();
		companyUsers.setPostId(companyUsersPostId);
		companyUsersMap.put(companyUsers.getUid(), companyUsers);
		companyUsersPostRef.setValue(companyUsers, new DatabaseReference.CompletionListener() {
		    @Override
		    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
		        if (databaseError != null) {
		            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + companyUsers.getCompanyId());
		            isAdded = "N";
		        } else {
		        	logger.info("Company saved successfully, Company Details="+companyUsers.getCompanyId());
		        	isAdded = "Y";
				}
		    }
		});	
	}

	public String updateCompany(CompanyData companyData) {
		try {
			DatabaseReference companysRef = databaseReference.child("companys").child(companyData.getCompanyId());
			DatabaseReference companyUsersRef = databaseReference.child("companyUsers");
			Map<String, Object> companyUpdates = new HashMap<String, Object>();
			companyUpdates.put(companyData.getCompanyId(), companyData);
			companysRef.updateChildren(companyUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + companyData.getCompanyId());
			            isUpdated = "N";
			        } else {
			        	logger.info("Company updated successfully, Company Details="+companyData.getCompanyId());
			        	isUpdated = "Y";
					}
			    }
			});
			if(Constants.YES.equalsIgnoreCase(isUpdated)){
				String companyId = userRepository.isRegistered(companyData.getListUid().get(0).getUid());
				if(companyId == null){
					addCompanyUser(companyUsersRef, companyData, companyData.getCompanyId());
				}
				return companyData.getCompanyId();
			}
			return null;
		} catch (Exception e) {
			return null;	
		}
	}
	
	public String removeCompany(String companyId) {
		try {
			DatabaseReference companysRef = databaseReference.child("companys").child(companyId);
			Map<String, Object> companyUpdates = new HashMap<String, Object>();
			companyUpdates.put(companyId, null);
			companysRef.updateChildren(companyUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + companyId);
			            isDeleted = "N";
			        } else {
			        	logger.info("Company removed successfully, Company Details="+companyId);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public CompanyData getCompanyById(String companyId) {
		if(StringUtils.isBlank(companyId)){
			DatabaseReference companyDataRef = databaseReference.child("companys").child(companyId);
			companyData = null;
			companyDataRef.orderByChild("companyId").equalTo(companyId).addChildEventListener(new ChildEventListener() {
			    @Override
			    public void onChildAdded(DataSnapshot dataSnapshot, String prevChildKey) {
			        companyData = dataSnapshot.getValue(CompanyData.class);
			        System.out.println(dataSnapshot.getKey() + " was " + companyData.getCompanyId());
			    }
	
				@Override
				public void onChildChanged(DataSnapshot snapshot, String previousChildName) {
					
				}
	
				@Override
				public void onChildRemoved(DataSnapshot snapshot) {
					
				}
	
				@Override
				public void onChildMoved(DataSnapshot snapshot, String previousChildName) {
					
				}
	
				@Override
				public void onCancelled(DatabaseError error) {
					
				}
			});
			logger.info("Company loaded successfully, Company details=" + companyData);
			return companyData;
		}else {
			return null;
		}
	}
	
	public List<CompanyData> getAllCompanies() {
		DatabaseReference companyDataRef = databaseReference.child("companys");
		companyDataRef.orderByChild("companyId").addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot companySnapshot) {
		    	companysList.clear();
		        for (DataSnapshot companyPostSnapshot: companySnapshot.getChildren()) {
		            CompanyData companyData = companyPostSnapshot.getValue(CompanyData.class);
		            companysList.add(companyData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return companysList;
	}
}