package com.beatus.billlive.repository;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.BillData;
import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.beatus.billlive.service.exception.BillliveServiceException;
import com.beatus.billlive.validation.exception.BillValidationException;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;


@Component("billRepository")
public class BillRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(BillRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
			
	public String addBill(BillData billData) {
		try {
        	logger.info("In addBill method of BillRepository");
			DatabaseReference billsRef = databaseReference.child("bills").child(billData.getCompanyId());
			Map<String, BillData> bill = new HashMap<String, BillData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference billsPostRef = billsRef.push();
			// Get the unique ID generated by a push()
			String postId = billsPostRef.getKey();
			billData.setPostId(postId);
			bill.put(billData.getBillNumber(), billData);
			billsPostRef.setValue(billData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + billData.getUid());
			        } else {
			        	logger.info("Bill saved successfully, Bill Details="+billData.getUid());
			        }
			    }
			});
			return billData.getBillNumber();
		} catch (Exception e) {
			throw e;	
		}
	}

	public String updateBill(BillData billData) throws BillValidationException, BillliveServiceException {
		try {
			logger.info("In updateBill method of BillRepository");
			DatabaseReference billsRef = databaseReference.child("bills").child(billData.getCompanyId());
			Map<String, Object> billUpdates = new HashMap<String, Object>();
			billUpdates.put(billData.getBillNumber(), billData);
			billsRef.updateChildren(billUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + billData.getUid());
			            isUpdated = "N";
			        } else {
			        	logger.info("Bill updated successfully, Bill Details = "+billData.getUid());
			        	isUpdated = "Y";
					}
			    }
			});
			return isUpdated;
		} catch (Exception e) {
			throw new BillliveServiceException("Billlive Service exception at UpdateBill method of BillRepository. Error message : " + e.getMessage());
		}
	}
	
	public String removeBill(String billNumber, String companyId) {
		try {
			logger.info("In removeBill method of BillRepository");
			DatabaseReference billsRef = databaseReference.child("bills").child(companyId);
			Map<String, Object> billUpdates = new HashMap<String, Object>();
			billUpdates.put(billNumber, null);
			billsRef.updateChildren(billUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + billNumber);
			            isDeleted = "N";
			        } else {
			        	logger.info("Bill removed successfully, Bill Details="+billNumber);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public void getBillByBillNumber(String companyId, String billNumber, OnGetDataListener listener) {
		logger.info("In getBillByBillNumber method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();
		
		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.orderByChild("billNumber").equalTo(billNumber).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("Bill loaded successfully");
	}
	
	public void getAllBillsBasedOnCompanyId(String companyId, OnGetDataListener listener) {
		logger.info("In getBillByBillNumber method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		
		waitForTheTaskToCompleteAndReturn(waitSource, listener);
	}

	public void getAllBillsInAMonth(String companyId, String year, String month, OnGetDataListener listener) {
		logger.info("In getAllBillsInAMonth method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}
	
	public void getAllBillsInAYear(String companyId, String year, OnGetDataListener listener) {
		logger.info("In getAllBillsInAYear method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.orderByChild("year").equalTo(year).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}
	
	public void getAllBillsInADay(String companyId, String year, String month, String day, OnGetDataListener listener) {
		logger.info("In getAllBillsInADay method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).orderByChild("day").equalTo(day).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}
	
	public void getAllBills(String companyId, OnGetDataListener listener) {
		logger.info("In getAllBills method of BillRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference billDataRef = databaseReference.child("bills").child(companyId);
		billDataRef.orderByChild("companyId").equalTo(companyId).addListenerForSingleValueEvent(new ValueEventListener() {
		    @Override
		    public void onDataChange(DataSnapshot dataSnapshot) {
		    	waitSource.setResult(dataSnapshot);
		    }

		    @Override
		    public void onCancelled(DatabaseError databaseError) {
		    	listener.onFailed(databaseError);
		    }
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource, OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
		    Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if(waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}
		
	}
}