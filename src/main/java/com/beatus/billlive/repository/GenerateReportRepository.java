package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.BillData;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;


@Component("generateReportRepository")
public class GenerateReportRepository {/*
	
	private static final Logger logger = LoggerFactory.getLogger(GenerateReportRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	
	public String generateReportByBillNumber(String billNumber) {
		try {
			DatabaseReference billsRef = databaseReference.child("bills").child(billData.getCompanyId());
			Map<String, BillData> bill = new HashMap<String, BillData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference billsPostRef = billsRef.push();
			// Get the unique ID generated by a push()
			String postId = billsPostRef.getKey();
			billData.setPostId(postId);
			bill.put(billData.getBillNumber(), billData);
			billsPostRef.setValue(billData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + billData.getUid());
			        } else {
			        	logger.info("Bill saved successfully, Bill Details="+billData.getUid());
			        }
			    }
			});
			return billData.getBillNumber();
		} catch (Exception e) {
			throw e;	
		}
	}

	
*/}