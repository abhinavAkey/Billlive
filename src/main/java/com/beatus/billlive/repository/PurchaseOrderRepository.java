package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.PurchaseOrderData;
import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.beatus.billlive.utils.Constants;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;

@Component("purchaseOrderRepository")
public class PurchaseOrderRepository {

	private static final Logger logger = LoggerFactory.getLogger(PurchaseOrderRepository.class);

	@Autowired
	@Qualifier(value = "databaseReference")
	private DatabaseReference databaseReference;

	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";

	private PurchaseOrderData purchaseOrderData = null;

	List<PurchaseOrderData> purchaseOrdersList = new ArrayList<PurchaseOrderData>();

	public String addPurchaseOrder(PurchaseOrderData purchaseOrderData) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders")
					.child(purchaseOrderData.getCompanyId());
			Map<String, PurchaseOrderData> purchaseOrder = new HashMap<String, PurchaseOrderData>();
			// Generate a reference to a new location and add some data using
			// push()
			DatabaseReference purchaseOrdersPostRef = purchaseOrdersRef.push();
			// Get the unique ID generated by a push()
			String postId = purchaseOrdersPostRef.getKey();
			purchaseOrderData.setPostId(postId);
			purchaseOrder.put(purchaseOrderData.getPurchaseOrderNumber(), purchaseOrderData);
			purchaseOrdersPostRef.setValue(purchaseOrderData, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println("Data could not be saved " + databaseError.getMessage() + " "
								+ purchaseOrderData.getUid());
						isAdded = "N";
					} else {
						logger.info("PurchaseOrder saved successfully, PurchaseOrder Details="
								+ purchaseOrderData.getUid());
						isAdded = "Y";
					}
				}
			});
			if (Constants.YES.equalsIgnoreCase(isAdded)) {
				return purchaseOrderData.getPurchaseOrderNumber();
			} else {
				return null;
			}
		} catch (Exception e) {
			return null;
		}
	}

	public String updatePurchaseOrder(PurchaseOrderData purchaseOrderData) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders")
					.child(purchaseOrderData.getCompanyId());
			Map<String, Object> purchaseOrderUpdates = new HashMap<String, Object>();
			purchaseOrderUpdates.put(purchaseOrderData.getPurchaseOrderNumber(), purchaseOrderData);
			purchaseOrdersRef.updateChildren(purchaseOrderUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println("Data could not be updated " + databaseError.getMessage() + " "
								+ purchaseOrderData.getUid());
						isUpdated = "N";
					} else {
						logger.info("PurchaseOrder updated successfully, PurchaseOrder Details="
								+ purchaseOrderData.getUid());
						isUpdated = "Y";
					}
				}
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;
		}
	}

	public String removePurchaseOrder(String purchaseOrderNumber, String companyId) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders").child(companyId);
			Map<String, Object> purchaseOrderUpdates = new HashMap<String, Object>();
			purchaseOrderUpdates.put(purchaseOrderNumber, null);
			purchaseOrdersRef.updateChildren(purchaseOrderUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println(
								"Data could not be removed " + databaseError.getMessage() + " " + purchaseOrderNumber);
						isDeleted = "N";
					} else {
						logger.info("PurchaseOrder removed successfully, PurchaseOrder Details=" + purchaseOrderNumber);
						isDeleted = "Y";
					}
				}
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;
		}
	}

	public void getPurchaseOrderByPurchaseOrderNumber(String companyId, String purchaseOrderNumber,
			OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderData = null;
		purchaseOrderDataRef.orderByChild("purchaseOrderNumber").equalTo(purchaseOrderNumber)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("PurchaseOrder loaded successfully, PurchaseOrder details=" + purchaseOrderData);
	}

	public void getAllPurchaseOrdersBasedOnCompanyId(String companyId, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.addListenerForSingleValueEvent(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				waitSource.setResult(dataSnapshot);
			}

			@Override
			public void onCancelled(DatabaseError databaseError) {
				listener.onFailed(databaseError);
			}
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllPurchaseOrdersInAMonth(String companyId, String year, String month, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllPurchaseOrdersInAYear(String companyId, String year, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllPurchaseOrdersInADay(String companyId, String year, String month, String day,
			OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).orderByChild("day")
				.equalTo(day).addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource,
			OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
			Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if (waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}

	}

}
