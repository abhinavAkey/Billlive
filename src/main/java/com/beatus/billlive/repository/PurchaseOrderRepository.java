package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.PurchaseOrderData;
import com.beatus.billlive.utils.Constants;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;


@Component("purchaseOrderRepository")
public class PurchaseOrderRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(PurchaseOrderRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
	
	private PurchaseOrderData purchaseOrderData = null;
	
	List<PurchaseOrderData> purchaseOrdersList = new ArrayList<PurchaseOrderData>();
	
	public String addPurchaseOrder(PurchaseOrderData purchaseOrderData) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders").child(purchaseOrderData.getCompanyId());
			Map<String, PurchaseOrderData> purchaseOrder = new HashMap<String, PurchaseOrderData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference purchaseOrdersPostRef = purchaseOrdersRef.push();
			// Get the unique ID generated by a push()
			String postId = purchaseOrdersPostRef.getKey();
			purchaseOrderData.setPostId(postId);
			purchaseOrder.put(purchaseOrderData.getPurchaseOrderNumber(), purchaseOrderData);
			purchaseOrdersPostRef.setValue(purchaseOrderData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + purchaseOrderData.getUid());
			            isAdded = "N";
			        } else {
			        	logger.info("PurchaseOrder saved successfully, PurchaseOrder Details="+purchaseOrderData.getUid());
			        	isAdded = "Y";
					}
			    }
			});
			if(Constants.YES.equalsIgnoreCase(isAdded)){
				return purchaseOrderData.getPurchaseOrderNumber();
			}else {
				return null;
			}
		} catch (Exception e) {
			return null;	
		}
	}

	public String updatePurchaseOrder(PurchaseOrderData purchaseOrderData) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders").child(purchaseOrderData.getCompanyId());
			Map<String, Object> purchaseOrderUpdates = new HashMap<String, Object>();
			purchaseOrderUpdates.put(purchaseOrderData.getPurchaseOrderNumber(), purchaseOrderData);
			purchaseOrdersRef.updateChildren(purchaseOrderUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + purchaseOrderData.getUid());
			            isUpdated = "N";
			        } else {
			        	logger.info("PurchaseOrder updated successfully, PurchaseOrder Details="+purchaseOrderData.getUid());
			        	isUpdated = "Y";
					}
			    }
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;	
		}
	}
	
	public String removePurchaseOrder(String purchaseOrderNumber, String companyId) {
		try {
			DatabaseReference purchaseOrdersRef = databaseReference.child("purchaseOrders").child(companyId);
			Map<String, Object> purchaseOrderUpdates = new HashMap<String, Object>();
			purchaseOrderUpdates.put(purchaseOrderNumber, null);
			purchaseOrdersRef.updateChildren(purchaseOrderUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + purchaseOrderNumber);
			            isDeleted = "N";
			        } else {
			        	logger.info("PurchaseOrder removed successfully, PurchaseOrder Details="+purchaseOrderNumber);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public PurchaseOrderData getPurchaseOrderByPurchaseOrderNumber(String companyId, String purchaseOrderNumber) {
		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderData = null;
		purchaseOrderDataRef.orderByChild("purchaseOrderNumber").equalTo(purchaseOrderNumber).addChildEventListener(new ChildEventListener() {
		    @Override
		    public void onChildAdded(DataSnapshot dataSnapshot, String prevChildKey) {
		        purchaseOrderData = dataSnapshot.getValue(PurchaseOrderData.class);
		        System.out.println(dataSnapshot.getKey() + " was " + purchaseOrderData.getUid());
		    }

			@Override
			public void onChildChanged(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onChildRemoved(DataSnapshot snapshot) {
				
			}

			@Override
			public void onChildMoved(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		logger.info("PurchaseOrder loaded successfully, PurchaseOrder details=" + purchaseOrderData);
		return purchaseOrderData;
	}
	
	public List<PurchaseOrderData> getAllPurchaseOrdersBasedOnCompanyId(String companyId) {
		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot purchaseOrderSnapshot) {
		    	purchaseOrdersList.clear();
		        for (DataSnapshot purchaseOrderPostSnapshot: purchaseOrderSnapshot.getChildren()) {
		            PurchaseOrderData purchaseOrderData = purchaseOrderPostSnapshot.getValue(PurchaseOrderData.class);
		            purchaseOrdersList.add(purchaseOrderData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return purchaseOrdersList;
	}
	
	public List<PurchaseOrderData> getAllPurchaseOrdersInAMonth(String companyId, String year, String month) {
		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot purchaseOrderSnapshot) {
		    	purchaseOrdersList.clear();
		        for (DataSnapshot purchaseOrderPostSnapshot: purchaseOrderSnapshot.getChildren()) {
		            PurchaseOrderData purchaseOrderData = purchaseOrderPostSnapshot.getValue(PurchaseOrderData.class);
		            purchaseOrdersList.add(purchaseOrderData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return purchaseOrdersList;
	}
	
	public List<PurchaseOrderData> getAllPurchaseOrdersInAYear(String companyId, String year) {
		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year).addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot purchaseOrderSnapshot) {
		    	purchaseOrdersList.clear();
		        for (DataSnapshot purchaseOrderPostSnapshot: purchaseOrderSnapshot.getChildren()) {
		            PurchaseOrderData purchaseOrderData = purchaseOrderPostSnapshot.getValue(PurchaseOrderData.class);
		            purchaseOrdersList.add(purchaseOrderData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return purchaseOrdersList;
	}
	
	public List<PurchaseOrderData> getAllPurchaseOrdersInADay(String companyId, String year, String month, String day) {
		DatabaseReference purchaseOrderDataRef = databaseReference.child("purchaseOrders").child(companyId);
		purchaseOrderDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).orderByChild("day").equalTo(day).addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot purchaseOrderSnapshot) {
		    	purchaseOrdersList.clear();
		        for (DataSnapshot purchaseOrderPostSnapshot: purchaseOrderSnapshot.getChildren()) {
		            PurchaseOrderData purchaseOrderData = purchaseOrderPostSnapshot.getValue(PurchaseOrderData.class);
		            purchaseOrdersList.add(purchaseOrderData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return purchaseOrdersList;
	}


}
