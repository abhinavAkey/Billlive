package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.InvoiceData;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;


@Component("invoiceRepository")
public class InvoiceRepository {
	
	private static final Logger logger = LoggerFactory.getLogger(InvoiceRepository.class);

	@Autowired
    @Qualifier(value = "databaseReference")
    private DatabaseReference databaseReference;
	
	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";
	
	private InvoiceData invoiceData = null;
	
	List<InvoiceData> invoicesList = new ArrayList<InvoiceData>();
	
	public String addInvoice(InvoiceData invoiceData) {
		try {
			DatabaseReference invoicesRef = databaseReference.child("invoices");
			Map<String, InvoiceData> invoice = new HashMap<String, InvoiceData>();
			// Generate a reference to a new location and add some data using push()
			DatabaseReference invoicesPostRef = invoicesRef.push();
			// Get the unique ID generated by a push()
			String postId = invoicesPostRef.getKey();
			invoiceData.setPostId(postId);
			invoice.put(invoiceData.getUid(), invoiceData);
			invoicesPostRef.setValue(invoiceData, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be saved " + databaseError.getMessage() + " " + invoiceData.getUid());
			            isAdded = "N";
			        } else {
			        	logger.info("Invoice saved successfully, Invoice Details="+invoiceData.getUid());
			        	isAdded = "Y";
					}
			    }
			});
			return isAdded;
		} catch (Exception e) {
			return isAdded;	
		}
	}

	public String updateInvoice(InvoiceData invoiceData) {
		try {
			DatabaseReference invoicesRef = databaseReference.child("invoices");
			Map<String, Object> invoiceUpdates = new HashMap<String, Object>();
			invoiceUpdates.put(invoiceData.getUid(), invoiceData);
			invoicesRef.updateChildren(invoiceUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be updated " + databaseError.getMessage() + " " + invoiceData.getUid());
			            isUpdated = "N";
			        } else {
			        	logger.info("Invoice updated successfully, Invoice Details="+invoiceData.getUid());
			        	isUpdated = "Y";
					}
			    }
			});
			return isUpdated;
		} catch (Exception e) {
			return isUpdated;	
		}
	}
	
	public String removeInvoice(String uid) {
		try {
			DatabaseReference invoicesRef = databaseReference.child("invoices");
			Map<String, Object> invoiceUpdates = new HashMap<String, Object>();
			invoiceUpdates.put(uid, null);
			invoicesRef.updateChildren(invoiceUpdates, new DatabaseReference.CompletionListener() {
			    @Override
			    public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
			        if (databaseError != null) {
			            System.out.println("Data could not be removed " + databaseError.getMessage() + " " + uid);
			            isDeleted = "N";
			        } else {
			        	logger.info("Invoice removed successfully, Invoice Details="+uid);
			        	isDeleted = "Y";
					}
			    }
			});
			return isDeleted;
		} catch (Exception e) {
			return isDeleted;	
		}
	}
	
	public InvoiceData getInvoiceById(String uId) {
		DatabaseReference invoiceDataRef = databaseReference.child("invoices");
		invoiceData = null;
		invoiceDataRef.orderByChild("uid").equalTo(uId).addChildEventListener(new ChildEventListener() {
		    @Override
		    public void onChildAdded(DataSnapshot dataSnapshot, String prevChildKey) {
		        invoiceData = dataSnapshot.getValue(InvoiceData.class);
		        System.out.println(dataSnapshot.getKey() + " was " + invoiceData.getUid());
		    }

			@Override
			public void onChildChanged(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onChildRemoved(DataSnapshot snapshot) {
				
			}

			@Override
			public void onChildMoved(DataSnapshot snapshot, String previousChildName) {
				
			}

			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		logger.info("Invoice loaded successfully, Invoice details=" + invoiceData);
		return invoiceData;
	}
	
	public List<InvoiceData> getAllInvoices() {
		DatabaseReference invoiceDataRef = databaseReference.child("invoices");
		invoiceDataRef.addValueEventListener(new ValueEventListener() {
		    public void onDataChange(DataSnapshot invoiceSnapshot) {
		    	invoicesList.clear();
		        for (DataSnapshot invoicePostSnapshot: invoiceSnapshot.getChildren()) {
		            InvoiceData invoiceData = invoicePostSnapshot.getValue(InvoiceData.class);
		            invoicesList.add(invoiceData);
		        }
		    }
		    
			@Override
			public void onCancelled(DatabaseError error) {
				
			}
		});
		return invoicesList;
	}


}