package com.beatus.billlive.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import com.beatus.billlive.domain.model.InvoiceData;
import com.beatus.billlive.repository.data.listener.OnGetDataListener;
import com.beatus.billlive.service.exception.BillliveServiceException;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.tasks.Task;
import com.google.firebase.tasks.TaskCompletionSource;
import com.google.firebase.tasks.Tasks;

@Component("invoiceRepository")
public class InvoiceRepository {

	private static final Logger logger = LoggerFactory.getLogger(InvoiceRepository.class);

	@Autowired
	@Qualifier(value = "databaseReference")
	private DatabaseReference databaseReference;

	public String isAdded = "N";
	public String isUpdated = "N";
	public String isDeleted = "N";

	private InvoiceData invoiceData = null;

	List<InvoiceData> invoicesList = new ArrayList<InvoiceData>();

	public String addInvoice(InvoiceData invoiceData) {
		try {
			logger.info("In addInvoice method of InvoiceRepository");
			DatabaseReference invoicesRef = databaseReference.child("invoices").child(invoiceData.getCompanyId());
			;
			Map<String, InvoiceData> invoice = new HashMap<String, InvoiceData>();
			// Generate a reference to a new location and add some data using
			// push()
			DatabaseReference invoicesPostRef = invoicesRef.push();
			// Get the unique ID generated by a push()
			String postId = invoicesPostRef.getKey();
			invoiceData.setPostId(postId);
			invoice.put(invoiceData.getUid(), invoiceData);
			invoicesPostRef.setValue(invoiceData, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println(
								"Data could not be saved " + databaseError.getMessage() + " " + invoiceData.getUid());
						isAdded = "N";
					} else {
						logger.info("Invoice saved successfully, Invoice Details=" + invoiceData.getUid());
						isAdded = "Y";
					}
				}
			});
			return isAdded;
		} catch (Exception e) {
			throw new BillliveServiceException(
					"Billlive Service exception at Addinvoice method of InvoiceRepository. Error message : "
							+ e.getMessage());
		}
	}

	public String updateInvoice(InvoiceData invoiceData) {
		try {
			logger.info("In updateInvoice method of InvoiceRepository");
			DatabaseReference invoicesRef = databaseReference.child("invoices").child(invoiceData.getCompanyId());
			Map<String, Object> invoiceUpdates = new HashMap<String, Object>();
			invoiceUpdates.put(invoiceData.getUid(), invoiceData);
			invoicesRef.updateChildren(invoiceUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println(
								"Data could not be updated " + databaseError.getMessage() + " " + invoiceData.getUid());
						isUpdated = "N";
					} else {
						logger.info("Invoice updated successfully, Invoice Details=" + invoiceData.getUid());
						isUpdated = "Y";
					}
				}
			});
			return isUpdated;
		} catch (Exception e) {
			throw new BillliveServiceException(
					"Billlive Service exception at UpdateBill method of InvoiceRepository. Error message : "
							+ e.getMessage());
		}
	}

	public String removeInvoice(String invoiceNumber, String companyId) {
		try {
			logger.info("In removeInvoice method of InvoiceRepository");
			DatabaseReference invoicesRef = databaseReference.child("invoices").child(companyId);
			Map<String, Object> invoiceUpdates = new HashMap<String, Object>();
			invoiceUpdates.put(invoiceNumber, null);
			invoicesRef.updateChildren(invoiceUpdates, new DatabaseReference.CompletionListener() {
				@Override
				public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
					if (databaseError != null) {
						System.out.println(
								"Data could not be removed " + databaseError.getMessage() + " " + invoiceNumber);
						isDeleted = "N";
					} else {
						logger.info("Invoice removed successfully, Invoice Details=" + invoiceNumber);
						isDeleted = "Y";
					}
				}
			});
			return isDeleted;
		} catch (Exception e) {
			throw new BillliveServiceException(
					"Billlive Service exception at removeInvoice method of InvoiceRepository. Error message : "
							+ e.getMessage());
		}
	}

	public void getInvoiceByInvoiceNumber(String companyId, String invoiceNumber, OnGetDataListener listener) {
		logger.info("In getInvoiceById method of InvoiceRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceData = null;
		invoiceDataRef.orderByChild("uid").equalTo(invoiceNumber)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

		logger.info("Invoice loaded successfully, Invoice details=" + invoiceData);
	}

	public void getAllInvoices(String companyId, OnGetDataListener listener) {
		logger.info("In getAllInvoices method of InvoiceRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceDataRef.orderByChild("companyId").equalTo(companyId)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllInvoicesInADay(String companyId, String year, String month, String day,
			OnGetDataListener listener) {
		logger.info("In getAllInvoicesInADay method of InvoiceRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month).orderByChild("day")
				.equalTo(day).addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllInvoicesInAMonth(String companyId, String year, String month, OnGetDataListener listener) {
		logger.info("In getAllInvoicesInAMonth method of InvoiceRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceDataRef.orderByChild("year").equalTo(year).orderByChild("month").equalTo(month)
				.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot dataSnapshot) {
						waitSource.setResult(dataSnapshot);
					}

					@Override
					public void onCancelled(DatabaseError databaseError) {
						listener.onFailed(databaseError);
					}
				});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllInvoicesInAYear(String companyId, String year, OnGetDataListener listener) {
		logger.info("In getAllInvoicesInAYear method of InvoiceRepository");
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceDataRef.orderByChild("year").equalTo(year).addListenerForSingleValueEvent(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				waitSource.setResult(dataSnapshot);
			}

			@Override
			public void onCancelled(DatabaseError databaseError) {
				listener.onFailed(databaseError);
			}
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	public void getAllInvoicesBasedOnCompanyId(String companyId, OnGetDataListener listener) {
		TaskCompletionSource<DataSnapshot> waitSource = new TaskCompletionSource<DataSnapshot>();

		DatabaseReference invoiceDataRef = databaseReference.child("invoices").child(companyId);
		invoiceDataRef.addListenerForSingleValueEvent(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				waitSource.setResult(dataSnapshot);
			}

			@Override
			public void onCancelled(DatabaseError databaseError) {
				listener.onFailed(databaseError);
			}
		});
		waitForTheTaskToCompleteAndReturn(waitSource, listener);

	}

	private void waitForTheTaskToCompleteAndReturn(TaskCompletionSource<DataSnapshot> waitSource,
			OnGetDataListener listener) {
		Task<DataSnapshot> waitTask = waitSource.getTask();

		try {
			Tasks.await(waitTask);
		} catch (ExecutionException | InterruptedException e) {
			waitTask = Tasks.forException(e);
		}

		if (waitTask.isSuccessful()) {
			DataSnapshot result = waitTask.getResult();
			listener.onSuccess(result);
		}

	}
}